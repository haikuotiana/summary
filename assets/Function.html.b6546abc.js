import{_ as t,o as e,c as o,a as n,b as p,d as c,e as s,r as l}from"./app.0ece2a1e.js";const i={},u=c(`<h1 id="\u51FD\u6570\u5F0F\u7F16\u7A0B" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u5F0F\u7F16\u7A0B" aria-hidden="true">#</a> \u51FD\u6570\u5F0F\u7F16\u7A0B</h1><h2 id="\u51FD\u6570\u5F0F\u7F16\u7A0B\u542B\u4E49" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u5F0F\u7F16\u7A0B\u542B\u4E49" aria-hidden="true">#</a> \u51FD\u6570\u5F0F\u7F16\u7A0B\u542B\u4E49</h2><ul><li><p>\u51FD\u6570\u5F0F\u7F16\u7A0B\u662F\u4E00\u79CD\u5F3A\u8C03\u4EE5\u51FD\u6570\u4F7F\u7528\u4E3A\u4E3B\u7684\u8F6F\u4EF6\u5F00\u53D1\u98CE\u683C \uFF0C\u4E5F\u662F\u4E00\u79CD\u8303\u5F0F\u3002</p></li><li><p>\u67D0\u4E9B\u51FD\u6570\u5F0F\u7F16\u7A0B\u8BED\u8A00Haskell\u3001lisp\u3001Scheme\u7B49\u3002</p></li></ul><h2 id="js\u4E2D\u51FD\u6570\u5F0F\u7F16\u7A0B" tabindex="-1"><a class="header-anchor" href="#js\u4E2D\u51FD\u6570\u5F0F\u7F16\u7A0B" aria-hidden="true">#</a> js\u4E2D\u51FD\u6570\u5F0F\u7F16\u7A0B</h2><ul><li><p>\u6570\u5B66\u4E2D\u7684\u51FD\u6570</p><p>f(x) = y;</p></li><li><p>js\u4E2D\u7684\u51FD\u6570</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>   <span class="token keyword">let</span> factor <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
   <span class="token keyword">let</span> <span class="token function-variable function">totalNum</span> <span class="token operator">=</span> <span class="token parameter">num</span><span class="token operator">=&gt;</span>factor<span class="token operator">*</span>num<span class="token punctuation">;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">totalNum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u6570\u5B66\u4E2D\u7684\u51FD\u6570\u8868\u8FBE\u5F0F\u76F8\u540C\u7684\u8F93\u5165\uFF0C\u8F93\u51FA\u662F\u4E0D\u53D8\u7684\uFF0C\u8FD9\u5C31\u662F\u51FD\u6570\u7F16\u7A0B\u7684\u4E00\u4E2A\u7279\u6027\u3002\u5C06\u4E0A\u9762\u7684js\u4FEE\u6539\u4E3A\u7B26\u5408\u51FD\u6570\u5F0F\u7F16\u7A0B\u7684\u89C4\u8303\u5982\u4E0B\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>   <span class="token keyword">let</span> <span class="token function-variable function">totalNum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span>factor</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>factor<span class="token operator">*</span>num<span class="token punctuation">;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">totalNum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>js\u662F\u591A\u8303\u5F0F\u7F16\u7A0B\u8BED\u8A00\uFF0C\u4F46\u662F\u51FD\u6570\u4F5C\u4E3A\u4E00\u7B49\u516C\u6C11\uFF0C\u51FD\u6570\u5F0F\u7F16\u7A0B\u5177\u6709\u5929\u7136\u4F18\u52BF\u3002</p></li></ul><h2 id="\u51FD\u6570\u5F0F\u7F16\u7A0B\u4E2D\u6D89\u53CA\u5230\u7684\u6982\u5FF5" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u5F0F\u7F16\u7A0B\u4E2D\u6D89\u53CA\u5230\u7684\u6982\u5FF5" aria-hidden="true">#</a> \u51FD\u6570\u5F0F\u7F16\u7A0B\u4E2D\u6D89\u53CA\u5230\u7684\u6982\u5FF5</h2><h3 id="\u7EAF\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u7EAF\u51FD\u6570" aria-hidden="true">#</a> \u7EAF\u51FD\u6570</h3><ul><li><p>\u51FD\u6570\u5F0F\u7F16\u7A0B\u57FA\u4E8E\u7EAF\u51FD\u6570</p><ul><li>\u7EAF\u51FD\u6570\u662F\u5BF9\u7ED9\u5B9A\u7684\u8F93\u5165\u8FD4\u8FD8\u76F8\u540C\u8F93\u51FA\u7684\u51FD\u6570\uFF1B\u4F8B\u5982</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token parameter">value</span><span class="token operator">=&gt;</span>value<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>\u7EAF\u51FD\u6570\u610F\u4E49</p><ul><li><p>\u7EAF\u51FD\u6570\u53EF\u4EE5\u4EA7\u751F\u53EF\u6D4B\u8BD5\u7684\u4EE3\u7801</p><ul><li><p>\u4E0D\u4F9D\u8D56\u5916\u90E8\u73AF\u5883\u8BA1\u7B97\uFF0C\u4E0D\u4F1A\u4EA7\u751F\u526F\u4F5C\u7528\uFF0C\u63D0\u9AD8\u51FD\u6570\u7684\u590D\u7528\u6027\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;double(2) \u7B49\u4E8E 4&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>\u53EF\u8BFB\u6027\u66F4\u5F3A \uFF0Cjs\u51FD\u6570\u4E0D\u7BA1\u662F\u5426\u662F\u7EAF\u51FD\u6570 \u90FD\u4F1A\u6709\u4E00\u4E2A\u8BED\u4E49\u5316\u7684\u540D\u79F0\uFF0C\u66F4\u4FBF\u4E8E\u9605\u8BFB\u3002</p></li><li><p>\u53EF\u4EE5\u7EC4\u88C5\u6210\u590D\u6742\u4EFB\u52A1\u7684\u53EF\u80FD\u6027\u3002\u7B26\u5408\u6A21\u5757\u5316\u6982\u5FF5\u53CA\u5355\u4E00\u804C\u8D23\u539F\u5219\u3002</p></li></ul></li></ul><h2 id="\u9AD8\u9636\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u9AD8\u9636\u51FD\u6570" aria-hidden="true">#</a> \u9AD8\u9636\u51FD\u6570</h2><ul><li><p>\u9AD8\u9636\u51FD\u6570\u5B9A\u4E49</p><ul><li>\u9AD8\u9636\u51FD\u6570\uFF1A\u5C06\u51FD\u6570\u4F5C\u4E3A\u53C2\u6570\u6216\u8FD4\u56DE\u51FD\u6570\u7684\u51FD\u6570\u79F0\u4E3A\u9AD8\u9636\u51FD\u6570(Higher-Order Function)\u3002</li></ul></li><li><p>\u9AD8\u9636\u51FD\u6570\u7684\u62BD\u8C61</p><ul><li><p>\u4E00\u822C\u9AD8\u9636\u51FD\u6570\u7528\u4E8E\u62BD\u8C61\u901A\u7528\u95EE\u9898\uFF0C\u7B80\u800C\u8A00\u4E4B\uFF0C\u9AD8\u9636\u51FD\u6570\u5C31\u662F\u5B9A\u4E49\u62BD\u8C61\u3002</p><ul><li><p>\u547D\u4EE4\u5F0F\u5FAA\u73AF(\u6CE8\u91CD\u201C\u5982\u4F55\u201D\u505A\uFF0C\u6CE8\u91CD\u8FC7\u7A0B)\uFF1B</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u901A\u8FC7\u9AD8\u9636\u51FD\u6570\u62BD\u8C61\u8FC7\u7A0B,\u58F0\u660E\u5F0F\u7F16\u7A0B\uFF08\u6CE8\u91CD\u505A\u201C\u4EC0\u4E48\u201D\uFF0C\u6CE8\u91CD\u7ED3\u679C\uFF09;</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">forEach</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>fn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">forEach</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u901A\u8FC7\u9AD8\u9636\u51FD\u6570 \u201CforEach\u201D\u6765\u62BD\u8C61\u5FAA\u73AF&quot;\u5982\u4F55&quot;\u505A\u7684\u903B\u8F91,\u76F4\u63A5\u5173\u6CE8 \u505A&quot;\u4EC0\u4E48&quot;</p></li></ul></li></ul></li><li><p>\u9AD8\u9636\u51FD\u6570\u7684\u7F13\u5B58\u7279\u6027</p><ul><li><p>\u5229\u7528js\u51FD\u6570\u7684\u95ED\u5305</p><ul><li>once \u9AD8\u9636\u51FD\u6570</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">once</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;this fn is already execute&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;test...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> myfn <span class="token operator">=</span>  <span class="token function">once</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">myfn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">myfn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="\u67EF\u91CC\u5316" tabindex="-1"><a class="header-anchor" href="#\u67EF\u91CC\u5316" aria-hidden="true">#</a> \u67EF\u91CC\u5316</h2><ul><li><p>\u4EC0\u4E48\u662F\u67EF\u91CC\u5316\uFF1F</p><ul><li><p>\u67EF\u91CC\u5316\u662F\u628A\u4E00\u4E2A\u591A\u53C2\u6570\u51FD\u6570\u8F6C\u5316\u6210\u4E00\u4E2A\u5D4C\u5957\u7684\u4E00\u5143\u51FD\u6570\u7684\u8FC7\u7A0B\uFF1B</p><ul><li><p>\u5982\u4E0B\u4E8C\u5143\u51FD\u6570</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>x<span class="token operator">+</span>y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>\u67EF\u91CC\u5316\u51FD\u6570</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">curry</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> myfn <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">myfn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>\u591A\u53C2\u6570\u51FD\u6570\u67EF\u91CC\u5316</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u591A\u53C2\u6570\u67EF\u91CC\u5316\uFF1B</span>
    <span class="token keyword">const</span> <span class="token function-variable function">curry</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">curriedFn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token operator">&lt;</span>fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token function">curriedFn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
           <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>a</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>x<span class="token operator">+</span>y<span class="token operator">+</span>z<span class="token operator">+</span>a<span class="token punctuation">;</span>
    <span class="token keyword">const</span> myfn <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// console.log(myfn(1)(2));</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myfn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u67EF\u91CC\u5316\u610F\u4E49</p><ul><li>\u8BA9\u7EAF\u51FD\u6570\u66F4\u201D\u7EAF\u201C\uFF0C\u6BCF\u6B21\u63A5\u53D7\u4E00\u4E2A\u53C2\u6570\uFF0C\u677E\u6563\u89E3\u8026</li><li>\u67D0\u4E9B\u8BED\u8A00\u53CA\u7279\u5B9A\u73AF\u5883\u4E0B\u53EA\u80FD\u63A5\u53D7\u4E00\u4E2A\u53C2\u6570</li></ul></li></ul><h2 id="\u7EC4\u5408-composition-\u548C\u7BA1\u9053-pipe" tabindex="-1"><a class="header-anchor" href="#\u7EC4\u5408-composition-\u548C\u7BA1\u9053-pipe" aria-hidden="true">#</a> \u7EC4\u5408\uFF08composition\uFF09\u548C\u7BA1\u9053\uFF08pipe\uFF09</h2><h3 id="\u7EC4\u5408-composition" tabindex="-1"><a class="header-anchor" href="#\u7EC4\u5408-composition" aria-hidden="true">#</a> \u7EC4\u5408\uFF08composition\uFF09</h3><ul><li><p>\u7EC4\u5408\u51FD\u6570\uFF1A\u65E0\u9700\u521B\u5EFA\u65B0\u7684\u51FD\u6570\uFF0C\u901A\u8FC7\u57FA\u7840\u51FD\u6570\u89E3\u51B3\u773C\u524D\u95EE\u9898\u3002</p><ul><li><p>compose\u7EC4\u5408</p><p>\u53EF\u4EE5\u5C01\u88C5\u7EC4\u5408\u51FD\u6570\u6765\u5B9E\u73B0\u51FD\u6570\u6267\u884C</p><ul><li>\u4E24\u4E2A\u4E2A\u51FD\u6570\u7EC4\u5408\uFF08\u7F13\u5B58\u4E24\u4E2A\u51FD\u6570\uFF0C\u8FD4\u56DE\u65B0\u7684\u51FD\u6570\uFF0C\u6267\u884C\u7684\u65F6\u5019\u6309\u521B\u5EFA\u65F6\u7684\u4ECE\u53F3\u5F80\u5DE6\u987A\u5E8F\u6267\u884C\uFF09</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">afn</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">bfn</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> b<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">compose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token parameter">c</span><span class="token operator">=&gt;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> myfn <span class="token operator">=</span>  <span class="token function">compose</span><span class="token punctuation">(</span>afn<span class="token punctuation">,</span>bfn<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">myfn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>\u591A\u51FD\u6570\u7EC4\u5408</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">compose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token parameter">val</span><span class="token operator">=&gt;</span>fns<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span>fn</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">fn</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>\u83B7\u53D6\u6240\u6709\u7684\u5355\u8BCD</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">wordNum</span> <span class="token operator">=</span> <span class="token parameter">str</span><span class="token operator">=&gt;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\w\\-]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Mamba Out\uFF0CMamba Never Out&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">wordNum</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u7EDF\u8BA1\u957F\u5EA6</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">countFn</span> <span class="token operator">=</span> <span class="token parameter">arr</span><span class="token operator">=&gt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>\u5224\u65AD\u5947\u5076</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">oddOrEven</span> <span class="token operator">=</span> <span class="token parameter">num</span><span class="token operator">=&gt;</span>num<span class="token operator">%</span><span class="token number">2</span><span class="token operator">===</span><span class="token number">0</span><span class="token operator">?</span><span class="token string">&quot;\u5076\u6570&quot;</span><span class="token operator">:</span><span class="token string">&quot;\u5947\u6570&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>\u7EC4\u5408\u51FD\u6570\u4F7F\u7528:\u627E\u5230\u5355\u8BCD\u7EDF\u8BA1\u957F\u5EA6\u6700\u540E\u5224\u65AD\u5947\u5076\u6570</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Mamba Out\uFF0CMamba Never Out&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> myfn <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>oddOrEven<span class="token punctuation">,</span>countFn<span class="token punctuation">,</span>wordNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myfn</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><h3 id="\u7BA1\u9053-pipe" tabindex="-1"><a class="header-anchor" href="#\u7BA1\u9053-pipe" aria-hidden="true">#</a> \u7BA1\u9053\uFF08pipe\uFF09</h3><p>compose \u6267\u884C\u662F\u4ECE\u53F3\u5230\u5DE6\uFF0Cpipe\u662F\u4ECE\u5DE6\u81F3\u53F3\u7684\u6267\u884C\u3002\u51FD\u6570\u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">pipe</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token parameter">val</span><span class="token operator">=&gt;</span>fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span>fn</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">fn</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u200B \u7BA1\u9053\u3001\u7EC4\u5408 \u53D6\u820D \uFF1A\u7BA1\u9053\u53CA\u7EC4\u5408\u6700\u5927\u533A\u522B\u5728\u4E8E\u6267\u884C\u987A\u5E8F\u7684\u4E0D\u540C\uFF0C\u6570\u636E\u6D41\u5411\u4E0D\u540C\uFF0C\u8FBE\u5230\u76EE\u7684\u662F\u7C7B\u4F3C\u7684\u3002\u6240\u4EE5\u65E0\u4F18 \u52A3\u4E4B\u5206\uFF0C\u4FDD\u6301\u56E2\u961F\u98CE\u683C\u7EDF\u4E00\u5C31\u597D\u4E86\u3002</p><p>\u7EC4\u5408\u53CA\u7BA1\u9053\u7684\u610F\u4E49 \u628A\u5F88\u591A\u5C0F\u51FD\u6570\u7EC4\u5408\u8D77\u6765\u5B8C\u6210\u66F4\u590D\u6742\u7684\u903B\u8F91\u3002</p><h2 id="js\u51FD\u6570\u5F0F\u7F16\u7A0B\u5E93" tabindex="-1"><a class="header-anchor" href="#js\u51FD\u6570\u5F0F\u7F16\u7A0B\u5E93" aria-hidden="true">#</a> js\u51FD\u6570\u5F0F\u7F16\u7A0B\u5E93</h2>`,21),r=n("li",null,[n("p",null,"lodash.js \u3001ramda.js \u3001Underscore.js")],-1),k=s("Redux \u6574\u4F53\u662F\u901A\u8FC7\u51FD\u6570\u5F0F \u7F16\u7A0B\u601D\u7EF4\u5B9E\u73B0\u7684 ,\u5728\u6E90\u7801\u7684src\u76EE\u5F55\u4E0B\u5C31\u53EF\u4EE5\u770B\u5230compose\u7684\u6587\u4EF6,dispatch\u7684\u6267\u884C\u987A\u5E8F\u4FBF\u662F\u901A\u8FC7\u8FD9\u4E2A\u6587\u4EF6\u7684\u51FD\u6570\u7EC4\u5408\uFF0C\u63A8\u8350\u9605\u8BFBRedux\u6E90\u7801\uFF0C\u5177\u4F53compose\u4F7F\u7528\u5728"),d={href:"https://github.com/reduxjs/redux/blob/master/src/applyMiddleware.ts",target:"_blank",rel:"noopener noreferrer"},v=s("applyMiddleware"),m=s("\u6587\u4EF6\u91CC"),b=s("koa\u4E2D\u95F4\u4EF6\u6267\u884C\u987A\u5E8F\u4E5F\u5C31\u662F\u6D0B\u8471\u6A21\u578B\u4E5F\u662F\u7528\u4E86\u51FD\u6570\u7EC4\u5408compose\u7684\u7279\u6027\u5B9E\u73B0\uFF0C\u5177\u4F53\u662F\u4F7F\u7528\u4E86koa-compose\u8FD9\u4E2A\u5E93\uFF0C\u4EE3\u7801\u5728\u8FD9\u91CC "),f={href:"https://github.com/koajs/compose/blob/master/index.js",target:"_blank",rel:"noopener noreferrer"},g=s("git\u4ED3\u5E93"),h=s("\uFF0Ckoa\u7684\u4EE3\u7801\u90FD\u5F88\u77ED\uFF0C\u4F46\u5F88\u7CBE\u534E\uFF0C\u63A8\u8350\u9605\u8BFB\u3002");function y(j,w){const a=l("ExternalLinkIcon");return e(),o("div",null,[u,n("ul",null,[r,n("li",null,[n("p",null,[k,n("a",d,[v,p(a)]),m])]),n("li",null,[n("p",null,[b,n("a",f,[g,p(a)]),h])])])])}var _=t(i,[["render",y],["__file","Function.html.vue"]]);export{_ as default};
